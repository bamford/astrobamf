#!/bin/bash

# This script performs a backup of the
# SITE
# system logical volume to a backup logical volume
# located on a separate physical volume.
# It uses an LVM snapshot to ensure the data
# remains consistent during the backup.

BACKUP_VOLUME="site"
BACKUP_SIZE="32M"
BUFFER_SIZE="16M"

BACKUP_DEVICE="/dev/backup/${BACKUP_VOLUME}"
BACKUP_MOUNT_DIR="/mnt/backup"
BACKUP_RW_MOUNT="/mnt/backup/${BACKUP_VOLUME}_rw"
BACKUP_RO_MOUNT="/mnt/backup/${BACKUP_VOLUME}"
SNAPSHOT_NAME="system_${BACKUP_VOLUME}_snapshot"
SNAPSHOT_DEVICE="/dev/system/${SNAPSHOT_NAME}"
SNAPSHOT_MOUNT="/mnt/backup/${SNAPSHOT_NAME}"

### Create a logical volume to snapshot the system volume
#
# This is created every time. The volume is deleted at the end of the
# backup as it is not necessary to keep it, wastes space and
# cpu and will freeze when full.
#
# The size of this volume needs to be large enough to contain
# any changes which may happen on the original volume during
# the course of the backup.  For example, with a size of 592M,
# if a 1G file is written the snapshot volume may be frozen!
# To avoid this make size big enough to cope, execute only in
# quiet times (early hours) and make sure this script completes
# gracefully if a frozen snapshot is encountered.
#
lvcreate -L${BUFFER_SIZE} -s -n ${SNAPSHOT_NAME} /dev/system/${BACKUP_VOLUME}

### Create the backup logical volume
#
# This will only usually be necessary on the first run of this
# script, unless for some reason the backup itself has been lost!
#
# The size of the backup volume must be large enough to contain
# the contents of the original volume and any changes which have
# occurred over the length of time for which backups are kept.
# It may therefore be necessary to extend the backup volume manually.
#
if [ ! -h ${BACKUP_DEVICE} ] ; then
lvcreate -L${BACKUP_SIZE} -n ${BACKUP_VOLUME} backup
mkfs.xfs /dev/backup/${BACKUP_VOLUME}
fi

### Create the backup mount directory
#
# This will only usually be necessary on the first run of this script.
#
if [ ! -d ${BACKUP_MOUNT_DIR} ] ; then
mkdir ${BACKUP_MOUNT_DIR}
fi

### Protect the backup mount directory
#
chmod go-rwx ${BACKUP_MOUNT_DIR}

### Create the snapshot mount-point
#
# This will only usually be necessary on the first run of this script.
#
if [ ! -d ${SNAPSHOT_MOUNT} ] ; then
mkdir ${SNAPSHOT_MOUNT}
fi

### Protect the snapshot mount-point
#
chmod go-rwx ${SNAPSHOT_MOUNT}

### Mount the snapshot read-only
#
mount -o nouuid,ro ${SNAPSHOT_DEVICE} ${SNAPSHOT_MOUNT}

### Attempt to unmount the RO mount point
#
if [ -d ${BACKUP_RO_MOUNT} ] ; then
umount ${BACKUP_RO_MOUNT}
fi

### Create the backup RW mount-point
#
if [ ! -d $BACKUP_RW_MOUNT ] ; then
mkdir $BACKUP_RW_MOUNT
chmod go-rwx $BACKUP_RW_MOUNT
fi

# Attempt to mount the RW mount point; else abort
#
mount -o rw ${BACKUP_DEVICE} ${BACKUP_RW_MOUNT}
if (( $? )); then
{
	$ECHO "Could not mount $BACKUP_DEVICE read-write";
	exit;
}
fi

### Delete the oldest snapshot, if it exists
#
if [ -d ${BACKUP_RW_MOUNT}/daily.3 ] ; then
rm -rf ${BACKUP_RW_MOUNT}/daily.3 ;
fi

### Shift the middle snapshots(s) back by one, if they exist
if [ -d $BACKUP_RW_MOUNT/daily.2 ] ; then
mv ${BACKUP_RW_MOUNT}/daily.2 ${BACKUP_RW_MOUNT}/daily.3 ;
fi
if [ -d $BACKUP_RW_MOUNT/daily.1 ] ; then
mv ${BACKUP_RW_MOUNT}/daily.1 ${BACKUP_RW_MOUNT}/daily.2 ;
fi
if [ -d $BACKUP_RW_MOUNT/daily.0 ] ; then
mv ${BACKUP_RW_MOUNT}/daily.0 ${BACKUP_RW_MOUNT}/daily.1 ;
fi

### Make backup of current (snapshot) volume
#
# This method creates hard-links to the previous backup for unchanged
# files, saving considerable space.
#
rsync -a --delete --link-dest=${BACKUP_RW_MOUNT}/daily.1 \
${SNAPSHOT_MOUNT}/ ${BACKUP_RW_MOUNT}/daily.0/

### Update the mtime of daily.0 to reflect the snapshot time
#
touch ${BACKUP_RW_MOUNT}/daily.0 ;

### Attempt to unmount the RW mount point
#
umount ${BACKUP_RW_MOUNT}
rmdir ${BACKUP_RW_MOUNT}

### Attempt to create the RO mount point
#
# This will only usually be necessary on the first run of this script.
#
if [ ! -d ${BACKUP_RO_MOUNT} ] ; then
mkdir ${BACKUP_RO_MOUNT}
fi

### Attempt to mount the RO mount point
#
mount -o ro ${BACKUP_DEVICE} ${BACKUP_RO_MOUNT}

### Unmount the snapshot
#
umount ${SNAPSHOT_MOUNT}
rmdir ${SNAPSHOT_MOUNT}

### Remove the snapshot volume
#
lvremove -f ${SNAPSHOT_DEVICE}
